@page "/pages/Images"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.Images.Caching
@using CleanArchitecture.Blazor.Application.Features.Images.DTOs
@using CleanArchitecture.Blazor.Application.Features.Images.Commands.Delete

@using CleanArchitecture.Blazor.Application.Features.Images.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Images.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Images.Commands.Update

@inject IJSRuntime JS
@inject IStringLocalizer<Images> L
@attribute [Authorize(Policy = Permissions.Images.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

<ErrorBoundary>
    <ChildContent>
        <MudDataGrid ServerData="@(ServerReload)"
                     FixedHeader="true"
                     FixedFooter="true"
                     Virtualize="true"
                     @bind-RowsPerPage="_defaultPageSize"
                     Height="calc(100vh - 330px)"
                     Loading="@_loading"
                     MultiSelection="true"
                     @bind-SelectedItems="_selectedItems"
                     @bind-SelectedItem="_currentDto"
                     Hover="true" @ref="_table">
            <ToolBarContent>
                <div class="d-flex align-start flex-grow-1">
                    <div class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption">@Title</MudText>
                            <MudEnumSelect Style="min-width:120px" TEnum="ImageListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                            </MudEnumSelect>
                        </div>
                    </div>
                    <div class="flex-grow-1" />

                    <div class="d-flex flex-column justify-end">
                        <div class="d-flex">
                            <MudButton DisableElevation Variant="Variant.Outlined"
                                        Size="Size.Small"
                                        Disabled="@_loading"
                                        OnClick="@(()=>OnRefresh())"
                                        StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                        Style="margin-right: 4px; margin-bottom:4px">@ConstantString.Refresh</MudButton>

                             @if (_canDelete)
                            {
                                <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                            StartIcon="@Icons.Material.Filled.Delete"
                                            Disabled="@(!(_selectedItems.Count>0))"
                                            Size="Size.Small"
                                            Style="margin-right: 4px; margin-bottom:4px"
                                            OnClick="OnDeleteChecked"
                                            IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                            }

                        </div>
                        @if (_canSearch)
                        {
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                        }

                    </div>
                </div>
            </ToolBarContent>
            <Columns>
                <SelectColumn ShowInFooter="false"></SelectColumn>
                <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
                    <CellTemplate>
                        @if (_canEdit || _canDelete)
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                                     Dense="true"
                                     EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                                <MudMenuItem OnClick="@(()=>OnPreview(context.Item))">@L["Preview"]</MudMenuItem>
                                @if (_canEdit)
                                {
                                    <MudMenuItem OnClick="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                                }
                                @if (_canDelete)
                                {
                                    <MudMenuItem OnClick="@(()=>OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
                                }
                            </MudMenu>
                        }
                        else
                        {
                            <MudIconButton Variant="Variant.Filled" DisableElevation="true"
                                           Disabled="true"
                                           Icon="@Icons.Material.Filled.DoNotTouch"
                                           Size="Size.Small"
                                           Color="Color.Surface">
                                @ConstantString.NoAllowed
                            </MudIconButton>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Name" Title="@L[_currentDto.GetMemberDescription(x=>x.Name)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2">@context.Item.Name</MudText>
                            <MudText Typo="Typo.body2">@context.Item.Comments</MudText>
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.FolderId" Title="@L[_currentDto.GetMemberDescription(x=>x.FolderId)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2">@context.Item.Folder.Name</MudText>
                            <MudText Typo="Typo.body2">@context.Item.Folder.FolderScanDate</MudText>
                        </div>
                    </CellTemplate>
                </PropertyColumn>

                <PropertyColumn Property="x => x.FileSizeBytes" Title="@L[_currentDto.GetMemberDescription(x=>x.FileSizeBytes)]" />
                <PropertyColumn Property="x => x.FileCreationDate" Title="@L[_currentDto.GetMemberDescription(x=>x.FileCreationDate)]" />
                <PropertyColumn Property="x => x.FileLastModDate" Title="@L[_currentDto.GetMemberDescription(x=>x.FileLastModDate)]" />
                <PropertyColumn Property="x => x.RecentlyViewDatetime" Title="@L[_currentDto.GetMemberDescription(x=>x.RecentlyViewDatetime)]" />
                <PropertyColumn Property="x => x.MetaData" Title="@L[_currentDto.GetMemberDescription(x=>x.MetaData)]">
                    <CellTemplate>
                        <div class="d-flex flex-row">
                            <MudChip>@context.Item.MetaData.MimeType</MudChip>
                            <MudChip>@context.Item.MetaData.Camera?.Model</MudChip>
                            <MudChip>@context.Item.MetaData.Lens?.Model</MudChip>
                            @if (!string.IsNullOrEmpty(context.Item.MetaData.Caption))
                            {
                                <MudChip>@context.Item.MetaData.Caption</MudChip>
                            }
                            @if (!string.IsNullOrEmpty(context.Item.MetaData.Credit))
                            {
                                <MudChip>@context.Item.MetaData.Credit</MudChip>
                            }
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.ImageTags" Title="@L[_currentDto.GetMemberDescription(x=>x.ImageTags)]">
                    <CellTemplate>
                        <div class="d-flex flex-row">
                            @if (context.Item.ImageTags?.Any() ?? false)
                            {
                                @foreach (var tag in context.Item.ImageTags)
                                {
                                    <MudChip>@tag.Keyword</MudChip>
                                }
                            }
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.FaceDetections" Title="@L[_currentDto.GetMemberDescription(x=>x.FaceDetections)]">
                    <CellTemplate>
                        <div class="d-flex flex-row">
                            @if (context.Item.FaceDetections?.Any() ?? false)
                            {
                                <MudAvatarGroup>
                                    @foreach (var face in context.Item.FaceDetections)
                                    {
                                        <MudAvatar>
                                            <MudImage Src="@($"./thumbs/_FaceThumbs/{face.FileName}")"></MudImage>
                                        </MudAvatar>
                                    }
                                </MudAvatarGroup>
                            }
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.ProcessThumbStatus" Title="@L[_currentDto.GetMemberDescription(x=>x.ProcessThumbStatus)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            @switch (context.Item.ProcessThumbStatus)
                            {
                                case 0:
                                    <MudText>Not Start</MudText>
                                    break;
                                case 1:
                                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                                    break;
                                case 2:
                                    <MudText>Done</MudText>
                                    <MudText>@context.Item.ThumbLastUpdated?.ToLocalTime()</MudText>
                                    break;
                                case 3:
                                    <MudText Color="Color.Error">Error</MudText>
                                    break;
                            }
                        </div>
                    </CellTemplate>
                 </PropertyColumn>
                <PropertyColumn Property="x => x.DetectObjectStatus" Title="@L[_currentDto.GetMemberDescription(x=>x.DetectObjectStatus)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            @switch (context.Item.DetectObjectStatus)
                            {
                                case 0:
                                    <MudText>Not Start</MudText>
                                    break;
                                case 1:
                                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                                    break;
                                case 2:
                                    <MudText>Done</MudText>
                                    <MudText>@context.Item.FaceDetectLastUpdated?.ToLocalTime()</MudText>
                                    break;
                                case 3:
                                    <MudText Color="Color.Error">Error</MudText>
                                    break;
                            }
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.DetectFaceStatus" Title="@L[_currentDto.GetMemberDescription(x=>x.DetectFaceStatus)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            @switch (context.Item.DetectFaceStatus)
                            {
                                case 0:
                                    <MudText>Not Start</MudText>
                                    break;
                                case 1:
                                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                                    break;
                                case 2:
                                    <MudText>Done</MudText>
                                    <MudText>@context.Item.FaceDetectLastUpdated?.ToLocalTime()</MudText>
                                    break;
                                case 3:
                                    <MudText Color="Color.Error">Error</MudText>
                                    break;
                            }
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.RecognizeFaceStatus" Title="@L[_currentDto.GetMemberDescription(x=>x.RecognizeFaceStatus)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            @switch (context.Item.RecognizeFaceStatus)
                            {
                                case 0:
                                    <MudText>Not Start</MudText>
                                    break;
                                case 1:
                                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                                    break;
                                case 2:
                                    <MudText>Done</MudText>
                                    <MudText>@context.Item.FaceRecognizeLastUpdated?.ToLocalTime()</MudText>
                                    break;
                                case 3:
                                    <MudText Color="Color.Error">Error</MudText>
                                    break;
                            }
                        </div>
                    </CellTemplate>
                </PropertyColumn>
            </Columns>
            <NoRecordsContent>
                <MudText>@ConstantString.NoRecords</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.Loading</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudDataGrid>
        @if (!string.IsNullOrEmpty(_currentDto.Name))
        {
            <MudGrid Spacing="2">
                <MudItem lg="2" md="3" sm="4">
                <ImageCard Image="@_currentDto" ThumbSize="ThumbSize.Large"></ImageCard>
                </MudItem>
            </MudGrid>
            
        }
        
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>


@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<ImageDto> _selectedItems = new HashSet<ImageDto>();
    private MudDataGrid<ImageDto> _table = default!;
    private ImageDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    [Inject]
    private IMediator Mediator { get; set; } = default!;
    [Inject]
    private IMapper Mapper { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private ImagesWithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Images.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Images.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Images.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Images.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Images.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Images.Export)).Succeeded;
    }
    private async Task OnPreview(ImageDto dto)
    {
        if (dto.ThumbImages?.Any() ?? false)
        {
            var url = $"./thumbs/{dto.ThumbImages.First().Name}";
            var list = dto.ThumbImages.Select(x => $"./thumbs/{x.Name}").ToArray();
            await JS.InvokeVoidAsync("previewImage", url, list);
        }
        
    }
    private async Task<GridData<ImageDto>> ServerReload(GridState<ImageDto> state)
    {
        try
        {
            _loading = true;
            Query.Sort = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortBy = (state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? AutoFilterer.Enums.Sorting.Descending : AutoFilterer.Enums.Sorting.Ascending);
            Query.Page = state.Page + 1;
            Query.PerPage = state.PageSize;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<ImageDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView(ImageListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        ImageCacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }



    private async Task OnEdit(ImageDto dto)
    {
        var command = Mapper.Map<UpdateImageCommand>(dto);
        var parameters = new DialogParameters
            {
                { nameof(_ImageFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_ImageFormDialog>
        (L["Edit the item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnDelete(ImageDto dto)
    {
        var command = new DeleteImageCommand(new int[] { dto.Id });
        var parameters = new DialogParameters
           {
             { nameof(DeleteConfirmation.Command),  command },
             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmation, dto.Name) }
           };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnDeleteChecked()
    {
        var command = new DeleteImageCommand(_selectedItems.Select(x => x.Id).ToArray());
        var parameters = new DialogParameters
                        {
                             { nameof(DeleteConfirmation.Command),  command },
                             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmWithSelected,_selectedItems.Count) }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }



}