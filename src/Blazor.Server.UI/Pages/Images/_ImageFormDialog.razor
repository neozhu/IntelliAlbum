@using CleanArchitecture.Blazor.Application.Features.Images.Commands.Update

@inherits MudComponentBase
@inject IStringLocalizer<Images> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.FolderId)]" @bind-Value="model.FolderId" For="@(() => model.FolderId)" Min="0" Required="false" RequiredError="@L["folder id is required!"]"></MudNumericField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Name)]" @bind-Value="model.Name" For="@(() => model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Comments)]" @bind-Value="model.Comments" For="@(() => model.Comments)" Required="false" RequiredError="@L["comments is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.FileSizeBytes)]" @bind-Value="model.FileSizeBytes" For="@(() => model.FileSizeBytes)" Min="0" Required="false" RequiredError="@L["file size bytes is required!"]"></MudNumericField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.FileCreationDate)]" @bind-Value="model.FileCreationDate" For="@(() => model.FileCreationDate)" Required="false" RequiredError="@L["file creation date is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.FileLastModDate)]" @bind-Value="model.FileLastModDate" For="@(() => model.FileLastModDate)" Required="false" RequiredError="@L["file last mod date is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker Label="@L[model.GetMemberDescription(x=>x.RecentlyViewDatetime)]" @bind-Date="model.RecentlyViewDatetime" For="@(() => model.RecentlyViewDatetime)" Required="false" RequiredError="@L["recently view datetime is required!"]"></MudDatePicker>
                </MudItem>

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudButton Loading="@_saving" Color="MudBlazor.Color.Primary" OnClick="Submit">@ConstantString.Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    UpdateImageCommandValidator _modelValidator = new();
    [EditorRequired][Parameter] public UpdateImageCommand model { get; set; } = null!;
    [Inject] private IMediator _mediator { get; set; } = default!;
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await _mediator.Send(model);
            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }

    void Cancel() => MudDialog.Cancel();
}