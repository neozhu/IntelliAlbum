@using Microsoft.AspNetCore.Components.Web
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="css/app.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/CodeBeam.MudBlazor.Extensions/MudExtensions.min.css" rel="stylesheet" />
    <link href="_content/Blazor-ApexCharts/css/apexcharts.css" rel="stylesheet" />
    <link href="Blazor.Server.UI.styles.css" rel="stylesheet">
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/@@fancyapps/ui@5.0/dist/fancybox/fancybox.css" />
    <style>
        .mud-paper.mud-elevation-2.mud-card.image-card:hover {
            transform: scale(1.05);
            border-bottom-color: rgba(26,26,26),.08);
            box-shadow: 0 9px 11.5px -3px rgba(0,0,0,.1), 0 18.5px 28.5px 0 rgba(0,0,0,.03375), 0 7px 37.5px 0 rgba(0,0,0,.02625);
        }


        .fancybox__container {
            --fancybox-bg: rgba(24, 24, 27, 0.85);
            z-index: 9999;
        }

        .mud-input {
            font-size: 0.8125rem;
        }

        .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
            font-size: 0.8125rem;
        }

        .mud-button-year {
            font-size: 0.8125rem;
        }

        .mud-table-cell {
            font-size: var(--mud-typography-default-size);
        }

        .mud-typography-body1 {
            font-size: var(--mud-typography-default-size);
        }

        .mud-button-outlined-size-small {
            font-size: var(--mud-typography-default-size);
        }

        #blazor-error-ui {
            background: lightyellow;
            background-color: var(--mud-palette-error);
            color: var(--mud-palette-error-text);
            bottom: 0;
            box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
            display: none;
            left: 0;
            padding: 0.6rem 1.25rem 0.7rem 1.25rem;
            padding: 0.6rem 1.75rem 0.7rem 1.25rem;
            position: fixed;
            width: 100%;
            z-index: 9999;
        }

        #reconnect-modal {
            background: lightyellow;
            background-color: var(--mud-palette-warning-hover);
            color: var(--mud-palette-warning-darken);
            top: 0;
            box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
            display: none;
            left: 0;
            padding: 0.6rem 1.25rem 0.7rem 1.25rem;
            padding: 0.6rem 1.75rem 0.7rem 1.25rem;
            margin: 0px;
            position: fixed;
            width: 100%;
            z-index: 9999;
        }
    </style>
    <component type="typeof(HeadOutlet)" render-mode="Server" />
</head>
<body>
    <div id="reconnect-modal" style="display: none;">Connection lost -- please wait, attempting to reconnect</div>
    @RenderBody()
    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    <script type="text/javascript" src="https://alcdn.msauth.net/browser/2.23.0/js/msal-browser.min.js"></script>
    <script src="~/js/msal/authConfig.js"></script>

    <script src="https://accounts.google.com/gsi/client"></script>
    <script src="~/js/gapi/auth2config.js"></script>
    <script src="_content/Blazor-ApexCharts/js/apex-charts.min.js"></script>
    <script src="_content/Blazor-ApexCharts/js/blazor-apex-charts.js"></script>
    <script src="_framework/blazor.server.js" autostart="false"></script>
    <script src="~/js/boot.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_content/CodeBeam.MudBlazor.Extensions/MudExtensions.min.js"></script>
    <script src="_content/BlazorTime/blazorTime.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/openseadragon/4.0.0/openseadragon.min.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-org-chart@3.0.1-next.1"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-flextree@2.1.2/build/d3-flextree.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@fancyapps/ui@5.0/dist/fancybox/fancybox.umd.js"></script>

    <script type="text/javascript">

        async function externalLogin(provider, dotNetHelper) {
            if (provider == 'Microsoft') {
                await loginWithMicrosoft(provider, dotNetHelper);
            } else if (provider == 'Google') {
                await loginWithGoogle(provider, dotNetHelper);
            }

        }
        async function loginWithMicrosoft(provider, dotNetHelper) {
            var client = new msal.PublicClientApplication(msalConfig);
            var response = await client.loginPopup(loginRequest);
            await dotNetHelper.invokeMethodAsync('ConfirmExternal', provider, response.account.username, response.account.name, response.accessToken);
            console.log('login with microsoft success');
            localStorage.setItem('microsoft_client_token', response.account.homeAccountId);
        }
        async function loginWithGoogle(provider, dotNetHelper) {
            console.log(provider + 'initialize');
            client = google.accounts.oauth2.initTokenClient({
                client_id: auth2Config.clientId,
                scope: auth2Config.scope,
                ux_mode: 'popup',
                callback: async (response) => {
                    const access_token = response.access_token;
                    const url = `https://www.googleapis.com/oauth2/v3/userinfo?access_token=${access_token}`;
                    const data = await fetch(url).then((response) => response.json());
                    await dotNetHelper.invokeMethodAsync('ConfirmExternal', provider, data.email, data.name, access_token);
                    console.log('login with microsoft success');
                    localStorage.setItem('google_client_token', access_token);

                }
            });
            client.requestAccessToken();
        }
        async function externalLogout() {
            let client_token = localStorage.getItem('microsoft_client_token');
            if (client_token) {
                const client = new msal.PublicClientApplication(msalConfig);
                const logoutRequest = {
                    account: client.getAccountByHomeId(client_token)
                }

                await client.logoutPopup(logoutRequest);
                localStorage.removeItem('microsoft_client_token');
            } else {
                client_token = localStorage.getItem('google_client_token');
                if (client_token) {
                    google.accounts.oauth2.revoke(client_token);
                    localStorage.removeItem('google_client_token');
                }
            }
        }


        async function showOpenSeadragon(element, url) {
            console.log('showOpenSeadragon');
            var viewer = OpenSeadragon({
                id: element,
                showNavigator: false,
                showZoomControl: false,
                showHomeControl: false,
                showFullPageControl: false,
                showSequenceControl: false,
                maxZoomPixelRatio: 3,
                minZoomImageRatio: 0.3,
                tileSources: {
                    xmlns: "http://schemas.microsoft.com/deepzoom/2008",
                    type: 'image',
                    url: url,
                }
            });
            console.log(viewer);
        }

        function clearInput(inputId) {
            setTimeout(function () {
                var input = document.querySelector("#" + inputId);
                if (input) {
                    input.value = "";
                }
            }, 30);
        }
        var chart;
        async function createOrgChart(orgdata) {
            setTimeout(function () {
                //console.log(orgdata)
                const activeid = orgdata.find(x => x.isLoggedUser == true);
                chart = new d3.OrgChart()
                    .nodeHeight((d) => 85 + 25)
                    .nodeWidth((d) => 220 + 2)
                    .childrenMargin((d) => 50)
                    .compactMarginBetween((d) => 35)
                    .compactMarginPair((d) => 30)
                    .neighbourMargin((a, b) => 20)
                    .nodeContent(function (d, i, arr, state) {
                        const color = '#FFFFFF';
                        const imageDiffVert = 25 + 2;
                        return `
                                                <div style='width:${d.width}px;height:${d.height}px;padding-top:${imageDiffVert - 2}px;padding-left:1px;padding-right:1px'>
                                                        <div style="font-family: 'Inter', sans-serif;background-color:${color};  margin-left:-1px;width:${d.width - 2}px;height:${d.height - imageDiffVert}px;border-radius:10px;border: 1px solid #E4E2E9">
                                                                    <div style="display:flex;justify-content:flex-end;margin-top:5px;margin-right:8px">#${d.data.id.slice(-3)}</div>
                                                            <div style="background-color:${color};margin-top:${-imageDiffVert - 20}px;margin-left:${15}px;border-radius:100px;width:50px;height:50px;" ></div>
                                                            <div style="margin-top:${-imageDiffVert - 20}px;">   <img src=" ${d.data.profileUrl}" style="margin-left:${20}px;border-radius:100px;width:40px;height:40px;" /></div>
                                                            <div style="font-size:15px;color:#08011E;margin-left:20px;margin-top:10px">  ${d.data.name} </div>
                                                                    <div style="color:#716E7B;margin-left:20px;margin-top:3px;font-size:10px;"> ${d.data.positionName} </div>

                                                        </div>
                                                    </div>
                                                            `;
                    })
                    .container('.chart-container')
                    .data(orgdata)
                    .render();

                if (activeid != null) {
                    //console.log(activeid)
                    chart.setHighlighted(activeid.id).render();
                }
            }, 50);
        }
        function gallery(index, array_src, array_thumbsrc) {
            let images = [];
            for (let i = 0; i < array_src.length; i++) {
                images.push({
                    src: array_src[i],
                    thumb: array_thumbsrc[i],
                    download: array_src[i],
                    caption: array_src[i].split("/").pop(),
                    type: "image",
                    initialSize: "fit",
                })
            }
            const fancybox = new Fancybox(images, {
                startIndex: index,
                Thumbs: {
                    type: "modern",
                },
                Images: {
                    initialSize: "fit",
                    Panzoom: {
                        maxScale: 3,
                    },
                },
                Toolbar: {
                    display: {
                        left: ["infobar"],
                        middle: ["zoomIn",
                            "zoomOut",
                            "toggle1to1",
                            "rotateCCW",
                            "rotateCW",
                            "flipX",
                            "flipY",],
                        right: ["slideshow", "fullscreen", "download", "close"],
                    },
                },
            });
            fancybox.jumpTo(index);
        }
        function previewRawImage(url) {
            if (url == null) return;
            console.log(url);
            let images =
                [{
                    src: url,
                    download: url,
                    caption: url.split("/").pop(),
                    type: "image",
                    initialSize: "fit",

                }];

            const fancybox = new Fancybox(images, {
                Images: {
                    initialSize: "fit",
                    Panzoom: {
                        maxScale: 3,
                    },
                },
                Toolbar: {
                    display: {
                        left: ["infobar"],
                        middle: ["zoomIn",
                            "zoomOut",
                            "toggle1to1",
                            "rotateCCW",
                            "rotateCW",
                            "flipX",
                            "flipY",],
                        right: ["slideshow", "fullscreen", "download", "close"],
                    },
                },
            });

        }
        function previewImage(url, gallery) {

            if (url == null) return;
            console.log(url, gallery);
            if (isImageUrl(url)) {
                let images = [];
                if (gallery != null) {
                    images = gallery.filter(l => isImageUrl(l)).map(x => ({ src: x, caption: x.split("/").pop() }));
                } else {
                    images = [{ src: url, caption: url.split("/").pop() }];
                }
                const fancybox = new Fancybox(images);
            } else {
                const anchorElement = document.createElement('a');
                anchorElement.href = url;
                anchorElement.download = fileName ?? '';
                anchorElement.click();
                anchorElement.remove();
            }
        }
        function isImageUrl(url) {
            const imageExtensions = /\.(gif|jpe?g|tiff?|png|webp|bmp)$/i;
            return imageExtensions.test(url);
        }
        function isValidUrl(str) {
            if (str == null) {
                return false;
            }
            const urlRegex = /^([a-zA-Z]:)?(\\[a-zA-Z0-9\s_@@-~]+)+\.[a-zA-Z]{2,6}$/;
            return urlRegex.test(str);
        }
    </script>

</body>
</html>
