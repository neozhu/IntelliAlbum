@page "/"
@using MudBlazor.Utilities
@using Blazor.Server.UI.Models
@inject IStringLocalizer<SharedResource> L
<PageTitle>@Title</PageTitle>
<style>
    .lp-app-grid {
        display: grid;
        gap: 24px;
        grid-template-columns: repeat(auto-fit,minmax(300px,1fr));
    }
</style>
<MudContainer MaxWidth="MaxWidth.Large">
    <LandingSection StraightEnd="true" SectionClass="dark-section-text" BackgroundClass="mud-dark">
        <MudGrid>
            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.h6" Color="Color.Primary">Global scale</MudText>
                <MudText Typo="Typo.h5" Class="white-text">MudBlazor is growing quickly</MudText>
                <MudText Typo="Typo.subtitle1" Class="my-4">
                    We are growing every day, developers from all over the world are using MudBlazor and are engaged with the community.
                    We are dedicated to improving every aspect of MudBlazor to be your number one choice when looking for a Blazor component library.
                    Join us and be part of the libraryâ€™s success!
                </MudText>
            </MudItem>
            <MudItem Class="world-map-item" xs="12" sm="12" md="6">
                <div class="world-map">
                    <WorldMap />
                </div>
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudPaper Elevation="3">
                    <div class="d-flex flex-row align-content-center align-center">
                        <MudTextField T="string" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
                        <MudButtonGroup>
                            <MudTooltip Text="@L["Small"]">
                                <MudIconButton Icon="@Icons.Material.Filled.ViewCompact" OnClick="OnSmall" aria-label="small"></MudIconButton>
                            </MudTooltip>
                            <MudTooltip Text="@L["Medium"]">
                                <MudIconButton Icon="@Icons.Material.Filled.ViewModule" OnClick="OnMedium" aria-label="Medium"></MudIconButton>
                            </MudTooltip>
                            <MudTooltip Text="@L["Large"]">
                                <MudIconButton Icon="@Icons.Material.Filled.GridView" OnClick="OnLarge" aria-label="Large"></MudIconButton>
                            </MudTooltip>
                        </MudButtonGroup>
                    </div>
                </MudPaper>

            </MudItem>
            <MudItem md="6" sm="12">
                <MudText>information</MudText>
            </MudItem>
            <MudItem md="6" sm="12">
                <div class="d-flex flex-row align-content-end align-end">
                    <MudSelect T="int" Label="@L["Rows per page"]" FullWidth="false" Style="width:50px">
                        <MudSelectItem Value="10">10</MudSelectItem>
                        <MudSelectItem Value="25">25</MudSelectItem>
                        <MudSelectItem Value="50">50</MudSelectItem>
                        <MudSelectItem Value="100">100</MudSelectItem>
                        <MudSelectItem Value="1000">1000</MudSelectItem>
                    </MudSelect>
                    <MudPagination Size="Size.Small" Variant="Variant.Filled" Count="3" />
                </div>
            </MudItem>
        </MudGrid>
        <MudGrid>
            @for (var i= 0;i < 50; i++){
                <MudItem xs="@xs">
                    <MudPaper Square="true" Elevation="2" Class="d-flex align-center justify-center mud-width-full py-8">@i</MudPaper>
                </MudItem>
            }
        </MudGrid>
    </LandingSection>
</MudContainer>

@code {
    public string Title { get; set; } = "Dashboard";
    private int xs = 2;
    protected override async Task OnInitializedAsync()
    {

    }


    private Task OnSmall()
    {
       xs = 2;
        return Task.CompletedTask;
    }
    private Task OnMedium()
    {
        xs = 3;
        return Task.CompletedTask;
    }
    private Task OnLarge()
    {
        xs = 4;
        return Task.CompletedTask;
    }
}
