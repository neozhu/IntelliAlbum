@page "/user/profile"
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Application.Features.Fluxor;
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Processing

@inherits OwningComponentBase
@inject IStringLocalizer<Profile> L
@inject IJSRuntime JS
<PageTitle>@Title</PageTitle>
<ErrorBoundary>
    <ChildContent>
        @if (IsLoading && string.IsNullOrEmpty(model.UserId))
        {
            <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-7" />
        }else{
        <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" Elevation="6" ActivePanelIndexChanged="ActivePanelIndexChanged"
                 ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
            <MudTabPanel Text="@L["Profile"]">
                <MudForm Model="@model" @ref="@_form" Validation="@(_userValidator.ValidateValue)" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.Center" Style="max-width:600px;display:flex;">
                        <MudItem sm="12" xs="12">
                            <div class="d-flex justify-center">

                                @if (string.IsNullOrEmpty(model.ProfilePictureDataUrl))
                                {
                                    <MudElement Class="d-flex flex-column  align-center">
                                        <MudAvatar Style="height:128px; width:128px; font-size:2rem;">@model.UserName.ToUpper().First()</MudAvatar>
                                        <div class="d-flex">
                                            @if (model.AssignedRoles is not null)
                                            {
                                                @foreach (var role in model.AssignedRoles)
                                                {
                                                    <MudChip Size="MudBlazor.Size.Small">@role</MudChip>
                                                }
                                            }
                                        </div>

                                    </MudElement>
                                }
                                else
                                {
                                    <MudElement Class="d-flex flex-column  align-center">
                                        <MudAvatar Image="@model.ProfilePictureDataUrl" Style="height:128px; width:128px; font-size:2rem;" />
                                        <div class="d-flex">
                                            @if (model.AssignedRoles is not null)
                                            {
                                                @foreach (var role in model.AssignedRoles)
                                                {
                                                                <MudChip Size="MudBlazor.Size.Small">@role</MudChip>
                                                }
                                            }
                                        </div>
                                    </MudElement>
                                }
                                <MudTooltip Text="@L["Click upload a photo."]">
                                    <InputFile id="UploadPhoto" OnChange="UploadPhoto" hidden accept=".jpg, .jpeg, .png" />
                                    <MudIconButton HtmlTag="label"
                                                   Color="MudBlazor.Color.Info"
                                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                                   for="UploadPhoto"></MudIconButton>
                                </MudTooltip>
                            </div>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.TenantName)" @bind-Value="model.TenantName" Label="@L["Tenant Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField For="@(() => model.SuperiorName)" @bind-Value="model.SuperiorName" Label="@L["Superior Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.UserName)" @bind-Value="model.UserName" Label="@L["User Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.Email)" @bind-Value="model.Email" Label="@L["Email"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.DisplayName)" @bind-Value="model.DisplayName" Label="@L["Display Name"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem sm="6" xs="12">
                            <MudTextField For="@(() => model.PhoneNumber)" @bind-Value="model.PhoneNumber" Label="@L["Phone Number"]" Variant="Variant.Text"></MudTextField>
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Disabled="@submitting" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">
                                @if (submitting)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                }
                                else
                                {
                                    <MudText>@ConstantString.Save</MudText>
                                }
                                </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudTabPanel>
            <MudTabPanel Text="@L["Change Password"]">
                <MudForm Model="@_changepassword" @ref="@_passwordform" Validation="@(_passwordValidator.ValidateValue)" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.Center" Style="max-width:300px">
                        <MudItem sm="12" xs="12">
                            <MudPasswordField Immediate="true"
                                          Label="@L["Current Password"]"
                                          For="@(()=>_changepassword.CurrentPassword)"
                            @bind-Value="_changepassword.CurrentPassword"
                                          Variant="Variant.Text"
                                          PasswordMode="true"
                                          Required="true"
                                          RequiredError="@L["current password is required!"]"
                                           />
                        </MudItem>
                        <MudItem xs="12">
                            <MudPasswordField Immediate="true"
                                          Label="@L["New Password"]"
                                          For="@(()=>_changepassword.NewPassword)"
                            @bind-Value="_changepassword.NewPassword"
                                          Variant="Variant.Text"
                                              PasswordMode="true"
                                          Required="true"
                                          RequiredError="@L["password is required!"]"
                                           />
                        </MudItem>
                        <MudItem xs="12">
                            <MudPasswordField Immediate="true"
                                          Label="@L["Confirm New Password"]"
                                          For="@(()=>_changepassword.ConfirmPassword)"
                            @bind-Value="_changepassword.ConfirmPassword"
                                          Variant="Variant.Text"
                                              PasswordMode="true"
                                          Required="true"
                                          RequiredError="@L["password is required!"]"
                                           />
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-auto" OnClick="@(async () => await ChangePassword())">
                                @if (submitting)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                }
                                else
                                {
                                    <MudText>@L["Change Password"]</MudText>
                                }
                                </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudTabPanel>
            <MudTabPanel Text="@L["Org Chart"]">
                <div class="chart-container"
                     style="height: calc(100vh - 265px);"></div>
            </MudTabPanel>
        </MudTabs>
        }
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code {
    [Inject]
    private IState<UserProfileState> UserProfileState { get; set; } = null!;
    private bool IsLoading => UserProfileState.Value.IsLoading;
    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;
    private MudForm? _form = null!;
    private MudForm? _passwordform = null!;
    public string Title { get; set; } = "Profile";

    private bool submitting;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;
    [Inject] private IUploadService _uploadService { get; set; } = default!;

    private UserProfile model => UserProfileState.Value.UserProfile;
    private UserProfileEditValidator _userValidator = new();
    private UserManager<ApplicationUser> _userManager { get; set; } = default!;
    [Inject]
    private IIdentityService _identityService { get; set; } = default!;
    public string Id => Guid.NewGuid().ToString();

    public void ReRender() => StateHasChanged();

    private ChangePasswordModel _changepassword { get; set; } = new();
    private ChangePasswordModelValidator _passwordValidator = new();
    private List<OrgItem> _orgData = new();


    private async void ActivePanelIndexChanged(int index)
    {
        if (index == 2)
        {
            await LoadOrgData();
            await JS.InvokeVoidAsync("createOrgChart", this._orgData);
        }
    }
    private async Task LoadOrgData()
    {
        var currerntuserName = (await _authState).User.GetUserName();
        var list = await _userManager.Users.Include(x => x.UserRoles).ThenInclude(x => x.Role).Include(x => x.Superior).ToListAsync();
        foreach (var item in list)
        {
            var roles = await _userManager.GetRolesAsync(item);
            var count = await _userManager.Users.Where(x => x.SuperiorId == item.Id).CountAsync();
            var orgitem = new OrgItem();
            orgitem.id = item.Id;
            orgitem.name = item.DisplayName ?? item.UserName;
            orgitem.area = item.TenantName;
            orgitem.profileUrl = item.ProfilePictureDataUrl;
            orgitem.imageUrl = item.ProfilePictureDataUrl;
            if (currerntuserName == item.UserName)
                orgitem.isLoggedUser = true;
            orgitem.size = "";
            orgitem.tags = item.PhoneNumber ?? item.Email;
            if (roles != null && roles.Count > 0)
                orgitem.positionName = string.Join(',', roles);
            orgitem.parentId = item.SuperiorId;

            orgitem._directSubordinates = count;
            this._orgData.Add(orgitem);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _userManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        UserProfileState.StateChanged += StateOnStateChanged;
    }
    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        UserProfileState.StateChanged -= StateOnStateChanged;
    }
    private void StateOnStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }
    private async Task UploadPhoto(InputFileChangeEventArgs e)
    {
        var filestream = e.File.OpenReadStream(GlobalVariable.MaxAllowedSize);
        var imgstream = new MemoryStream();
        await filestream.CopyToAsync(imgstream);
        imgstream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = Image.Load(imgstream))
            {
                image.Mutate(i => i.Resize(new ResizeOptions() { Mode = SixLabors.ImageSharp.Processing.ResizeMode.Crop, Size = new SixLabors.ImageSharp.Size(128, 128) }));
                image.Save(outStream, SixLabors.ImageSharp.Formats.Png.PngFormat.Instance);
                var filename = e.File.Name;
                var fi = new FileInfo(filename);
                var ext = fi.Extension;
                var result = await _uploadService.UploadAsync(new UploadRequest(Guid.NewGuid().ToString() + ext, UploadType.ProfilePicture, outStream.ToArray()));
                model.ProfilePictureDataUrl = result;
                var user = await _userManager.FindByIdAsync(model.UserId!);
                user!.ProfilePictureDataUrl = model.ProfilePictureDataUrl;
                await _userManager.UpdateAsync(user);
                Snackbar.Add(L["The avatar has been updated."], MudBlazor.Severity.Info);
                Dispatcher.Dispatch(new UserProfileUpdateAction() { UserProfile = model });
            }
        }
    }
    private async Task Submit()
    {
        submitting = true;
        try
        {
            await _form!.Validate();
            if (_form.IsValid)
            {
                var state = await _authState;
                var user = await _userManager.FindByIdAsync(model.UserId!);
                user!.PhoneNumber = model.PhoneNumber;
                user.DisplayName = model.DisplayName;
                user.ProfilePictureDataUrl = model.ProfilePictureDataUrl;
                await _userManager.UpdateAsync(user);
                Snackbar.Add($"{ConstantString.UpdateSuccess}", MudBlazor.Severity.Info);
                Dispatcher.Dispatch(new UserProfileUpdateAction() { UserProfile = model });
            }
        }
        finally
        {
            submitting = false;
        }
    }
    private async Task ChangePassword()
    {
        submitting = true;
        try
        {
            await _passwordform!.Validate();
            if (_passwordform!.IsValid)
            {
                var user = await _userManager.FindByIdAsync(model.UserId!);
                var result = await _userManager.ChangePasswordAsync(user!, _changepassword.CurrentPassword, _changepassword.NewPassword);
                if (result.Succeeded)
                {
                    Snackbar.Add($"{L["Changed password successfully."]}", MudBlazor.Severity.Info);
                }
                else
                {
                    Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description).ToArray())}", MudBlazor.Severity.Error);
                }
            }
        }
        finally
        {
            submitting = false;
        }
    }
}