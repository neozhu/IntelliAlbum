@using System.Net
@using CleanArchitecture.Blazor.Application.Common.ExceptionHandlers
<MudPaper Class="py-4 px-6 rounded-lg d-flex flex-column">
    <MudText Typo="Typo.h6" Color="Color.Error">@StatusCode</MudText>
    <div class="d-flex align-center gap-4">
        <MudText Typo="Typo.subtitle2" >@DateTime.Now</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(()=>ShowStackTrace=!ShowStackTrace)">More</MudButton>
    </div>
    <MudText>@Message For more information, contact your system administrator</MudText>
    @if (ShowStackTrace)
    {
        <MudText Typo="Typo.body2" Class="mt-2">@StackTrace</MudText>
    }
    <MudDivider Class="my-3" />
    <div class="mx-n2 mb-2">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="OnRefresh">@ConstantString.Refresh</MudButton>
    </div>
    <div class="d-flex justify-end">
    </div>
</MudPaper>

@code {
    private string? Message { get; set; }
    private bool ShowStackTrace { get; set; }
    private string? StackTrace { get; set; }
    private string? StatusCode { get; set; } = HttpStatusCode.InternalServerError.ToString();
    [EditorRequired][Parameter] public Exception Exception { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private ILogger<CustomError> Logger { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        var state = await _authState;
        var userName = state.User.GetUserName();
        switch (Exception)
        {
            case ServerException e:
                StatusCode = e.StatusCode.ToString();
                if (e.ErrorMessages is not null)
                {
                    Message = string.Join(", ", e.ErrorMessages.ToArray());
                }
                break;
            default:
                if (Exception.InnerException != null)
                {
                    while (Exception.InnerException != null)
                    {
                        Exception = Exception.InnerException;
                    }
                }
                Message = Exception.Message;
                break;
        }
        StackTrace = Exception.StackTrace;
        Logger.LogError(Exception, "{Message}. request url: {@url} {@UserName}", Message, Navigation.Uri, userName);
    }
    private void OnRefresh()
    {
        Navigation.NavigateTo(Navigation.Uri, true);
    }
}
