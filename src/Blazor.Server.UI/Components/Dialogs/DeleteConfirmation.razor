@inject IStringLocalizer<SharedResource> L
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3 mb-n1" />
            @ConstantString.DeleteConfirmationTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>@ContentText</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" OnClick="Submit">@ConstantString.Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public string? ContentText { get; set; }
    [EditorRequired]
    [Parameter]
    public IRequest<Result<int>> Command { get; set; } = default!;
    [Inject]
    private IMediator Mediator { get; set; } = default!;
    async Task Submit()
    {
        var result = await Mediator.Send(Command);
        if (result.Succeeded) {
            Snackbar.Add($"{ConstantString.DeleteSuccess}", MudBlazor.Severity.Info);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        
    }
    void Cancel() => MudDialog.Cancel();
}
